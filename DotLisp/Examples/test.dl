(def testfile "../../../Examples/test.dl")
(def x 2)
(def square
    (fn (x)
        (* x x)))




; (quote (testing 1 (2.0) -3.14e159))
; (+ 2 2)
; (+ (* 2 100) (* 1 10))
; (if (> 6 5) (+ 1 1) (+ 2 2))
; (if (< 6 5) (+ 1 1) (+ 2 2))
; (def x 3)
; (begin (def x 1) (set! x (+ x 1)) (+ x 1))
; ((fn (x) (+ x x)) 5)
; (def twice (fn (x) (* 2 x)))
; (def compose (fn (f g) (fn (x) (f (g x)))))
; ((compose list twice) 5)
; (def repeat (fn (f) (compose f f)))
; ((repeat twice) 5)
; (def fact (fn (n) (if (<= n 1) 1 (* n (fact (- n 1))))))
; (fact 3)
; (fact 50)
; (def abs (fn (n) ((if (> n 0) + -) 0 n)))
; (list (abs -3) (abs 0) (abs 3))
; (def combine (fn (f)
    ; (fn (x y)
      ; (if (null? x) (quote ())
          ; (f (list (car x) (car y))
             ; ((combine f) (cdr x) (cdr y)))))))
; (def zip (combine cons))
; (zip (list 1 2 3 4) (list 5 6 7 8))
; (def riff-shuffle 
    ; (fn (deck) 
        ; (begin
            ; (def take (fn (n seq) 
                ; (if (<= n 0) 
                    ; (quote ()) 
                    ; (cons (car seq) (take (- n 1) (cdr seq))))))
            ; (def drop (fn (n seq) (if (<= n 0) seq (drop (- n 1) (cdr seq)))))
            ; (def mid (fn (seq) (/ (length seq) 2)))
            ; ((combine append) (take (mid deck) deck) (drop (mid deck) deck)))))
; (riff-shuffle (list 1 2 3 4 5 6 7 8))
; ((repeat riff-shuffle) (list 1 2 3 4 5 6 7 8))
; (riff-shuffle (riff-shuffle (riff-shuffle (list 1 2 3 4 5 6 7 8))))